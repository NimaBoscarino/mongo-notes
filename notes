These are random scattered notes that I use to prepare the lecture material.
Not very useful for learning from!

----

Mongo... as we'll see, it is just JSON. 
It is what we call a NoSQL Database
- collections that store documents, which are just JSON objects
That's it!

There are two interfaces that we'll talk about today:
1. Interface for humans - a command line tool (shell)
2. Interface for other programs - API/Driver
    - A driver is a specific language or platform-specific library for talking to an API
    - e.g. ever see "sound drivers" or "video drivers"? They are libraries written for a specific platform (e.g. a Macbook Pro, a Microsoft Surface, a Samsung S7 phone, etc.) that make it easy for the operating system to talk to the hardware
    - in our case, we'll see that the Mongo driver makes it easy for Node to talk to MongoDB.
    - More about that later


Go to the mongo website, and show the documentation
- note that we start off by looking at the command line documentation
- boot up mongo!
- start the mongo shell
    - note, mongo is already installed in the students' vagrant

- Things to show off:
    - show dbs // show the databases
    - use <db> // switch into a particular database
    - db.<collection>.find() // show everything in a collection
    - db.<collection>.findOne() // return only one thing
    - <command>.pretty() // make the result nice to look at ðŸ˜Š

    - can also do find() with filters!
    - e.g. find({"_id": ObjectId(....)})

    - show that if the filter doesn't match anything, then we get nothing back
    
    - hop over to the documentation, and give a quick look over "Getting Started", the FIND documentation. E.g. matching a field in an embedded document is done...
        - find({"user.email": "nima@nima.com" })


    - The mongo docs have an interactive Web mongo shell! Holy moly! See it at the bottom of the "Getting Started", click on "Query Documents"

This shows off the "READ" functionality, or the "R" in "CRUD"

But we can also write data. See... INSERT

Let's try an insert with: db.<collection>.insertOne({...})

This returns an acknowledgement (the data was inserted), and the newly created ID of the object. If we try .findOne() and filter for that ID, we can see our data.

So that's inserting! We can do insertOne, but there is also insertMany(), where instead of passing a single object, we can pass in an array of objects to be inserted.

(In case someone asks about the ObjectID: Mongo does fancy work for performance, and the ObjectId is selected for this.)

That's the "CREATE" functionality, or the "C" in "CRUD".
Now let's take a look at UPDATING...
Jump over to the documentation (GETTING STARTED), and highlight the functions.

can do updateOne, or updateMany... using $set
- we need to filter, and also define what properties we are updating

And finally, we can delete. Deletion is done via .deleteOne() or .deleteMany(). Note that a filter needs to be passed in. {} is the "everything" filter.

Deletion is IRREVERSIBLE! That's why we make backups of our databases.

This is a good time to show off mongoimport with databased. And then demonstrate reading with it. (Not higher-order stuff just yet)

That's about it for the Shell... let's go on to the Driver now.

Go to the mongodb DRIVER docs, show how it is a completely different web page.

npm install mongodb

Start a new file, and start building up a new project.
